// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_stat_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_stat_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_stat_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_stat_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_stat_2eproto;
namespace stat {
class ListCommentsResponse;
struct ListCommentsResponseDefaultTypeInternal;
extern ListCommentsResponseDefaultTypeInternal _ListCommentsResponse_default_instance_;
class PaginationRequest;
struct PaginationRequestDefaultTypeInternal;
extern PaginationRequestDefaultTypeInternal _PaginationRequest_default_instance_;
}  // namespace stat
PROTOBUF_NAMESPACE_OPEN
template<> ::stat::ListCommentsResponse* Arena::CreateMaybeMessage<::stat::ListCommentsResponse>(Arena*);
template<> ::stat::PaginationRequest* Arena::CreateMaybeMessage<::stat::PaginationRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace stat {

// ===================================================================

class PaginationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stat.PaginationRequest) */ {
 public:
  inline PaginationRequest() : PaginationRequest(nullptr) {}
  ~PaginationRequest() override;
  explicit PROTOBUF_CONSTEXPR PaginationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PaginationRequest(const PaginationRequest& from);
  PaginationRequest(PaginationRequest&& from) noexcept
    : PaginationRequest() {
    *this = ::std::move(from);
  }

  inline PaginationRequest& operator=(const PaginationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaginationRequest& operator=(PaginationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PaginationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PaginationRequest* internal_default_instance() {
    return reinterpret_cast<const PaginationRequest*>(
               &_PaginationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PaginationRequest& a, PaginationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PaginationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaginationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PaginationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PaginationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PaginationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PaginationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaginationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stat.PaginationRequest";
  }
  protected:
  explicit PaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageSizeFieldNumber = 1,
    kPageNumberFieldNumber = 2,
  };
  // int32 page_size = 1;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // int32 page_number = 2;
  void clear_page_number();
  int32_t page_number() const;
  void set_page_number(int32_t value);
  private:
  int32_t _internal_page_number() const;
  void _internal_set_page_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:stat.PaginationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t page_size_;
  int32_t page_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stat_2eproto;
};
// -------------------------------------------------------------------

class ListCommentsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:stat.ListCommentsResponse) */ {
 public:
  inline ListCommentsResponse() : ListCommentsResponse(nullptr) {}
  ~ListCommentsResponse() override;
  explicit PROTOBUF_CONSTEXPR ListCommentsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCommentsResponse(const ListCommentsResponse& from);
  ListCommentsResponse(ListCommentsResponse&& from) noexcept
    : ListCommentsResponse() {
    *this = ::std::move(from);
  }

  inline ListCommentsResponse& operator=(const ListCommentsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCommentsResponse& operator=(ListCommentsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCommentsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCommentsResponse* internal_default_instance() {
    return reinterpret_cast<const ListCommentsResponse*>(
               &_ListCommentsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListCommentsResponse& a, ListCommentsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCommentsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCommentsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCommentsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCommentsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCommentsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCommentsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCommentsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "stat.ListCommentsResponse";
  }
  protected:
  explicit ListCommentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommentsFieldNumber = 1,
  };
  // repeated string comments = 1;
  int comments_size() const;
  private:
  int _internal_comments_size() const;
  public:
  void clear_comments();
  const std::string& comments(int index) const;
  std::string* mutable_comments(int index);
  void set_comments(int index, const std::string& value);
  void set_comments(int index, std::string&& value);
  void set_comments(int index, const char* value);
  void set_comments(int index, const char* value, size_t size);
  std::string* add_comments();
  void add_comments(const std::string& value);
  void add_comments(std::string&& value);
  void add_comments(const char* value);
  void add_comments(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& comments() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_comments();
  private:
  const std::string& _internal_comments(int index) const;
  std::string* _internal_add_comments();
  public:

  // @@protoc_insertion_point(class_scope:stat.ListCommentsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> comments_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_stat_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PaginationRequest

// int32 page_size = 1;
inline void PaginationRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t PaginationRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t PaginationRequest::page_size() const {
  // @@protoc_insertion_point(field_get:stat.PaginationRequest.page_size)
  return _internal_page_size();
}
inline void PaginationRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void PaginationRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:stat.PaginationRequest.page_size)
}

// int32 page_number = 2;
inline void PaginationRequest::clear_page_number() {
  page_number_ = 0;
}
inline int32_t PaginationRequest::_internal_page_number() const {
  return page_number_;
}
inline int32_t PaginationRequest::page_number() const {
  // @@protoc_insertion_point(field_get:stat.PaginationRequest.page_number)
  return _internal_page_number();
}
inline void PaginationRequest::_internal_set_page_number(int32_t value) {
  
  page_number_ = value;
}
inline void PaginationRequest::set_page_number(int32_t value) {
  _internal_set_page_number(value);
  // @@protoc_insertion_point(field_set:stat.PaginationRequest.page_number)
}

// -------------------------------------------------------------------

// ListCommentsResponse

// repeated string comments = 1;
inline int ListCommentsResponse::_internal_comments_size() const {
  return comments_.size();
}
inline int ListCommentsResponse::comments_size() const {
  return _internal_comments_size();
}
inline void ListCommentsResponse::clear_comments() {
  comments_.Clear();
}
inline std::string* ListCommentsResponse::add_comments() {
  std::string* _s = _internal_add_comments();
  // @@protoc_insertion_point(field_add_mutable:stat.ListCommentsResponse.comments)
  return _s;
}
inline const std::string& ListCommentsResponse::_internal_comments(int index) const {
  return comments_.Get(index);
}
inline const std::string& ListCommentsResponse::comments(int index) const {
  // @@protoc_insertion_point(field_get:stat.ListCommentsResponse.comments)
  return _internal_comments(index);
}
inline std::string* ListCommentsResponse::mutable_comments(int index) {
  // @@protoc_insertion_point(field_mutable:stat.ListCommentsResponse.comments)
  return comments_.Mutable(index);
}
inline void ListCommentsResponse::set_comments(int index, const std::string& value) {
  comments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:stat.ListCommentsResponse.comments)
}
inline void ListCommentsResponse::set_comments(int index, std::string&& value) {
  comments_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:stat.ListCommentsResponse.comments)
}
inline void ListCommentsResponse::set_comments(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:stat.ListCommentsResponse.comments)
}
inline void ListCommentsResponse::set_comments(int index, const char* value, size_t size) {
  comments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:stat.ListCommentsResponse.comments)
}
inline std::string* ListCommentsResponse::_internal_add_comments() {
  return comments_.Add();
}
inline void ListCommentsResponse::add_comments(const std::string& value) {
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:stat.ListCommentsResponse.comments)
}
inline void ListCommentsResponse::add_comments(std::string&& value) {
  comments_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:stat.ListCommentsResponse.comments)
}
inline void ListCommentsResponse::add_comments(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  comments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:stat.ListCommentsResponse.comments)
}
inline void ListCommentsResponse::add_comments(const char* value, size_t size) {
  comments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:stat.ListCommentsResponse.comments)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListCommentsResponse::comments() const {
  // @@protoc_insertion_point(field_list:stat.ListCommentsResponse.comments)
  return comments_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListCommentsResponse::mutable_comments() {
  // @@protoc_insertion_point(field_mutable_list:stat.ListCommentsResponse.comments)
  return &comments_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace stat

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_stat_2eproto
