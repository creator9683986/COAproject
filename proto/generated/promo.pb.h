// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: promo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_promo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_promo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_promo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_promo_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_promo_2eproto;
namespace promo {
class CreatePromoCodeRequest;
struct CreatePromoCodeRequestDefaultTypeInternal;
extern CreatePromoCodeRequestDefaultTypeInternal _CreatePromoCodeRequest_default_instance_;
class DeletePromoCodeRequest;
struct DeletePromoCodeRequestDefaultTypeInternal;
extern DeletePromoCodeRequestDefaultTypeInternal _DeletePromoCodeRequest_default_instance_;
class GetPromoCodeRequest;
struct GetPromoCodeRequestDefaultTypeInternal;
extern GetPromoCodeRequestDefaultTypeInternal _GetPromoCodeRequest_default_instance_;
class ListPromoCodesRequest;
struct ListPromoCodesRequestDefaultTypeInternal;
extern ListPromoCodesRequestDefaultTypeInternal _ListPromoCodesRequest_default_instance_;
class ListPromoCodesResponse;
struct ListPromoCodesResponseDefaultTypeInternal;
extern ListPromoCodesResponseDefaultTypeInternal _ListPromoCodesResponse_default_instance_;
class PromoCode;
struct PromoCodeDefaultTypeInternal;
extern PromoCodeDefaultTypeInternal _PromoCode_default_instance_;
class UpdatePromoCodeRequest;
struct UpdatePromoCodeRequestDefaultTypeInternal;
extern UpdatePromoCodeRequestDefaultTypeInternal _UpdatePromoCodeRequest_default_instance_;
}  // namespace promo
PROTOBUF_NAMESPACE_OPEN
template<> ::promo::CreatePromoCodeRequest* Arena::CreateMaybeMessage<::promo::CreatePromoCodeRequest>(Arena*);
template<> ::promo::DeletePromoCodeRequest* Arena::CreateMaybeMessage<::promo::DeletePromoCodeRequest>(Arena*);
template<> ::promo::GetPromoCodeRequest* Arena::CreateMaybeMessage<::promo::GetPromoCodeRequest>(Arena*);
template<> ::promo::ListPromoCodesRequest* Arena::CreateMaybeMessage<::promo::ListPromoCodesRequest>(Arena*);
template<> ::promo::ListPromoCodesResponse* Arena::CreateMaybeMessage<::promo::ListPromoCodesResponse>(Arena*);
template<> ::promo::PromoCode* Arena::CreateMaybeMessage<::promo::PromoCode>(Arena*);
template<> ::promo::UpdatePromoCodeRequest* Arena::CreateMaybeMessage<::promo::UpdatePromoCodeRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace promo {

// ===================================================================

class PromoCode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:promo.PromoCode) */ {
 public:
  inline PromoCode() : PromoCode(nullptr) {}
  ~PromoCode() override;
  explicit PROTOBUF_CONSTEXPR PromoCode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PromoCode(const PromoCode& from);
  PromoCode(PromoCode&& from) noexcept
    : PromoCode() {
    *this = ::std::move(from);
  }

  inline PromoCode& operator=(const PromoCode& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromoCode& operator=(PromoCode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PromoCode& default_instance() {
    return *internal_default_instance();
  }
  static inline const PromoCode* internal_default_instance() {
    return reinterpret_cast<const PromoCode*>(
               &_PromoCode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PromoCode& a, PromoCode& b) {
    a.Swap(&b);
  }
  inline void Swap(PromoCode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromoCode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PromoCode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PromoCode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PromoCode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PromoCode& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromoCode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "promo.PromoCode";
  }
  protected:
  explicit PromoCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 6,
    kCreatedAtFieldNumber = 7,
    kUpdatedAtFieldNumber = 8,
    kIdFieldNumber = 1,
    kCreatorIdFieldNumber = 4,
    kDiscountFieldNumber = 5,
  };
  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string code = 6;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string created_at = 7;
  void clear_created_at();
  const std::string& created_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_at();
  PROTOBUF_NODISCARD std::string* release_created_at();
  void set_allocated_created_at(std::string* created_at);
  private:
  const std::string& _internal_created_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_at(const std::string& value);
  std::string* _internal_mutable_created_at();
  public:

  // string updated_at = 8;
  void clear_updated_at();
  const std::string& updated_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_at();
  PROTOBUF_NODISCARD std::string* release_updated_at();
  void set_allocated_updated_at(std::string* updated_at);
  private:
  const std::string& _internal_updated_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_at(const std::string& value);
  std::string* _internal_mutable_updated_at();
  public:

  // int64 id = 1;
  void clear_id();
  int64_t id() const;
  void set_id(int64_t value);
  private:
  int64_t _internal_id() const;
  void _internal_set_id(int64_t value);
  public:

  // int64 creator_id = 4;
  void clear_creator_id();
  int64_t creator_id() const;
  void set_creator_id(int64_t value);
  private:
  int64_t _internal_creator_id() const;
  void _internal_set_creator_id(int64_t value);
  public:

  // double discount = 5;
  void clear_discount();
  double discount() const;
  void set_discount(double value);
  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);
  public:

  // @@protoc_insertion_point(class_scope:promo.PromoCode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_at_;
  int64_t id_;
  int64_t creator_id_;
  double discount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_promo_2eproto;
};
// -------------------------------------------------------------------

class CreatePromoCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:promo.CreatePromoCodeRequest) */ {
 public:
  inline CreatePromoCodeRequest() : CreatePromoCodeRequest(nullptr) {}
  ~CreatePromoCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR CreatePromoCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreatePromoCodeRequest(const CreatePromoCodeRequest& from);
  CreatePromoCodeRequest(CreatePromoCodeRequest&& from) noexcept
    : CreatePromoCodeRequest() {
    *this = ::std::move(from);
  }

  inline CreatePromoCodeRequest& operator=(const CreatePromoCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreatePromoCodeRequest& operator=(CreatePromoCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreatePromoCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreatePromoCodeRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePromoCodeRequest*>(
               &_CreatePromoCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreatePromoCodeRequest& a, CreatePromoCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreatePromoCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreatePromoCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreatePromoCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreatePromoCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreatePromoCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreatePromoCodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreatePromoCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "promo.CreatePromoCodeRequest";
  }
  protected:
  explicit CreatePromoCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTitleFieldNumber = 2,
    kDescriptionFieldNumber = 3,
    kCodeFieldNumber = 5,
    kDiscountFieldNumber = 4,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string title = 2;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string code = 5;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // double discount = 4;
  void clear_discount();
  double discount() const;
  void set_discount(double value);
  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);
  public:

  // @@protoc_insertion_point(class_scope:promo.CreatePromoCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  double discount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_promo_2eproto;
};
// -------------------------------------------------------------------

class UpdatePromoCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:promo.UpdatePromoCodeRequest) */ {
 public:
  inline UpdatePromoCodeRequest() : UpdatePromoCodeRequest(nullptr) {}
  ~UpdatePromoCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdatePromoCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePromoCodeRequest(const UpdatePromoCodeRequest& from);
  UpdatePromoCodeRequest(UpdatePromoCodeRequest&& from) noexcept
    : UpdatePromoCodeRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePromoCodeRequest& operator=(const UpdatePromoCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePromoCodeRequest& operator=(UpdatePromoCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePromoCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePromoCodeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePromoCodeRequest*>(
               &_UpdatePromoCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdatePromoCodeRequest& a, UpdatePromoCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePromoCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePromoCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdatePromoCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdatePromoCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdatePromoCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdatePromoCodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePromoCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "promo.UpdatePromoCodeRequest";
  }
  protected:
  explicit UpdatePromoCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kTitleFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kCodeFieldNumber = 6,
    kPromoIdFieldNumber = 2,
    kDiscountFieldNumber = 5,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // string title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string code = 6;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // int64 promo_id = 2;
  void clear_promo_id();
  int64_t promo_id() const;
  void set_promo_id(int64_t value);
  private:
  int64_t _internal_promo_id() const;
  void _internal_set_promo_id(int64_t value);
  public:

  // double discount = 5;
  void clear_discount();
  double discount() const;
  void set_discount(double value);
  private:
  double _internal_discount() const;
  void _internal_set_discount(double value);
  public:

  // @@protoc_insertion_point(class_scope:promo.UpdatePromoCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  int64_t promo_id_;
  double discount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_promo_2eproto;
};
// -------------------------------------------------------------------

class DeletePromoCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:promo.DeletePromoCodeRequest) */ {
 public:
  inline DeletePromoCodeRequest() : DeletePromoCodeRequest(nullptr) {}
  ~DeletePromoCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR DeletePromoCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeletePromoCodeRequest(const DeletePromoCodeRequest& from);
  DeletePromoCodeRequest(DeletePromoCodeRequest&& from) noexcept
    : DeletePromoCodeRequest() {
    *this = ::std::move(from);
  }

  inline DeletePromoCodeRequest& operator=(const DeletePromoCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeletePromoCodeRequest& operator=(DeletePromoCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeletePromoCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeletePromoCodeRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePromoCodeRequest*>(
               &_DeletePromoCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeletePromoCodeRequest& a, DeletePromoCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeletePromoCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeletePromoCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeletePromoCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeletePromoCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeletePromoCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeletePromoCodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeletePromoCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "promo.DeletePromoCodeRequest";
  }
  protected:
  explicit DeletePromoCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPromoIdFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 promo_id = 2;
  void clear_promo_id();
  int64_t promo_id() const;
  void set_promo_id(int64_t value);
  private:
  int64_t _internal_promo_id() const;
  void _internal_set_promo_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:promo.DeletePromoCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int64_t promo_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_promo_2eproto;
};
// -------------------------------------------------------------------

class GetPromoCodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:promo.GetPromoCodeRequest) */ {
 public:
  inline GetPromoCodeRequest() : GetPromoCodeRequest(nullptr) {}
  ~GetPromoCodeRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPromoCodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPromoCodeRequest(const GetPromoCodeRequest& from);
  GetPromoCodeRequest(GetPromoCodeRequest&& from) noexcept
    : GetPromoCodeRequest() {
    *this = ::std::move(from);
  }

  inline GetPromoCodeRequest& operator=(const GetPromoCodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPromoCodeRequest& operator=(GetPromoCodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPromoCodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPromoCodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetPromoCodeRequest*>(
               &_GetPromoCodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPromoCodeRequest& a, GetPromoCodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPromoCodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPromoCodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPromoCodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPromoCodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPromoCodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPromoCodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPromoCodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "promo.GetPromoCodeRequest";
  }
  protected:
  explicit GetPromoCodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPromoIdFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int64 promo_id = 2;
  void clear_promo_id();
  int64_t promo_id() const;
  void set_promo_id(int64_t value);
  private:
  int64_t _internal_promo_id() const;
  void _internal_set_promo_id(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:promo.GetPromoCodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int64_t promo_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_promo_2eproto;
};
// -------------------------------------------------------------------

class ListPromoCodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:promo.ListPromoCodesRequest) */ {
 public:
  inline ListPromoCodesRequest() : ListPromoCodesRequest(nullptr) {}
  ~ListPromoCodesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPromoCodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPromoCodesRequest(const ListPromoCodesRequest& from);
  ListPromoCodesRequest(ListPromoCodesRequest&& from) noexcept
    : ListPromoCodesRequest() {
    *this = ::std::move(from);
  }

  inline ListPromoCodesRequest& operator=(const ListPromoCodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPromoCodesRequest& operator=(ListPromoCodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPromoCodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPromoCodesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPromoCodesRequest*>(
               &_ListPromoCodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListPromoCodesRequest& a, ListPromoCodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPromoCodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPromoCodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPromoCodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPromoCodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPromoCodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPromoCodesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPromoCodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "promo.ListPromoCodesRequest";
  }
  protected:
  explicit ListPromoCodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kPageFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // int32 page = 2;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // int32 page_size = 3;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:promo.ListPromoCodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  int32_t page_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_promo_2eproto;
};
// -------------------------------------------------------------------

class ListPromoCodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:promo.ListPromoCodesResponse) */ {
 public:
  inline ListPromoCodesResponse() : ListPromoCodesResponse(nullptr) {}
  ~ListPromoCodesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPromoCodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPromoCodesResponse(const ListPromoCodesResponse& from);
  ListPromoCodesResponse(ListPromoCodesResponse&& from) noexcept
    : ListPromoCodesResponse() {
    *this = ::std::move(from);
  }

  inline ListPromoCodesResponse& operator=(const ListPromoCodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPromoCodesResponse& operator=(ListPromoCodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListPromoCodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPromoCodesResponse* internal_default_instance() {
    return reinterpret_cast<const ListPromoCodesResponse*>(
               &_ListPromoCodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListPromoCodesResponse& a, ListPromoCodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPromoCodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPromoCodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPromoCodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPromoCodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListPromoCodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListPromoCodesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListPromoCodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "promo.ListPromoCodesResponse";
  }
  protected:
  explicit ListPromoCodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPromoCodesFieldNumber = 1,
    kTotalCountFieldNumber = 2,
    kPageFieldNumber = 3,
    kPageSizeFieldNumber = 4,
  };
  // repeated .promo.PromoCode promo_codes = 1;
  int promo_codes_size() const;
  private:
  int _internal_promo_codes_size() const;
  public:
  void clear_promo_codes();
  ::promo::PromoCode* mutable_promo_codes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::promo::PromoCode >*
      mutable_promo_codes();
  private:
  const ::promo::PromoCode& _internal_promo_codes(int index) const;
  ::promo::PromoCode* _internal_add_promo_codes();
  public:
  const ::promo::PromoCode& promo_codes(int index) const;
  ::promo::PromoCode* add_promo_codes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::promo::PromoCode >&
      promo_codes() const;

  // int32 total_count = 2;
  void clear_total_count();
  int32_t total_count() const;
  void set_total_count(int32_t value);
  private:
  int32_t _internal_total_count() const;
  void _internal_set_total_count(int32_t value);
  public:

  // int32 page = 3;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // int32 page_size = 4;
  void clear_page_size();
  int32_t page_size() const;
  void set_page_size(int32_t value);
  private:
  int32_t _internal_page_size() const;
  void _internal_set_page_size(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:promo.ListPromoCodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::promo::PromoCode > promo_codes_;
  int32_t total_count_;
  int32_t page_;
  int32_t page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_promo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PromoCode

// int64 id = 1;
inline void PromoCode::clear_id() {
  id_ = int64_t{0};
}
inline int64_t PromoCode::_internal_id() const {
  return id_;
}
inline int64_t PromoCode::id() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.id)
  return _internal_id();
}
inline void PromoCode::_internal_set_id(int64_t value) {
  
  id_ = value;
}
inline void PromoCode::set_id(int64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:promo.PromoCode.id)
}

// string title = 2;
inline void PromoCode::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& PromoCode::title() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromoCode::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.PromoCode.title)
}
inline std::string* PromoCode::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:promo.PromoCode.title)
  return _s;
}
inline const std::string& PromoCode::_internal_title() const {
  return title_.Get();
}
inline void PromoCode::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* PromoCode::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* PromoCode::release_title() {
  // @@protoc_insertion_point(field_release:promo.PromoCode.title)
  return title_.Release();
}
inline void PromoCode::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.PromoCode.title)
}

// string description = 3;
inline void PromoCode::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& PromoCode::description() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromoCode::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.PromoCode.description)
}
inline std::string* PromoCode::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:promo.PromoCode.description)
  return _s;
}
inline const std::string& PromoCode::_internal_description() const {
  return description_.Get();
}
inline void PromoCode::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* PromoCode::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* PromoCode::release_description() {
  // @@protoc_insertion_point(field_release:promo.PromoCode.description)
  return description_.Release();
}
inline void PromoCode::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.PromoCode.description)
}

// int64 creator_id = 4;
inline void PromoCode::clear_creator_id() {
  creator_id_ = int64_t{0};
}
inline int64_t PromoCode::_internal_creator_id() const {
  return creator_id_;
}
inline int64_t PromoCode::creator_id() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.creator_id)
  return _internal_creator_id();
}
inline void PromoCode::_internal_set_creator_id(int64_t value) {
  
  creator_id_ = value;
}
inline void PromoCode::set_creator_id(int64_t value) {
  _internal_set_creator_id(value);
  // @@protoc_insertion_point(field_set:promo.PromoCode.creator_id)
}

// double discount = 5;
inline void PromoCode::clear_discount() {
  discount_ = 0;
}
inline double PromoCode::_internal_discount() const {
  return discount_;
}
inline double PromoCode::discount() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.discount)
  return _internal_discount();
}
inline void PromoCode::_internal_set_discount(double value) {
  
  discount_ = value;
}
inline void PromoCode::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:promo.PromoCode.discount)
}

// string code = 6;
inline void PromoCode::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& PromoCode::code() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromoCode::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.PromoCode.code)
}
inline std::string* PromoCode::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:promo.PromoCode.code)
  return _s;
}
inline const std::string& PromoCode::_internal_code() const {
  return code_.Get();
}
inline void PromoCode::_internal_set_code(const std::string& value) {
  
  code_.Set(value, GetArenaForAllocation());
}
inline std::string* PromoCode::_internal_mutable_code() {
  
  return code_.Mutable(GetArenaForAllocation());
}
inline std::string* PromoCode::release_code() {
  // @@protoc_insertion_point(field_release:promo.PromoCode.code)
  return code_.Release();
}
inline void PromoCode::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault()) {
    code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.PromoCode.code)
}

// string created_at = 7;
inline void PromoCode::clear_created_at() {
  created_at_.ClearToEmpty();
}
inline const std::string& PromoCode::created_at() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.created_at)
  return _internal_created_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromoCode::set_created_at(ArgT0&& arg0, ArgT... args) {
 
 created_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.PromoCode.created_at)
}
inline std::string* PromoCode::mutable_created_at() {
  std::string* _s = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:promo.PromoCode.created_at)
  return _s;
}
inline const std::string& PromoCode::_internal_created_at() const {
  return created_at_.Get();
}
inline void PromoCode::_internal_set_created_at(const std::string& value) {
  
  created_at_.Set(value, GetArenaForAllocation());
}
inline std::string* PromoCode::_internal_mutable_created_at() {
  
  return created_at_.Mutable(GetArenaForAllocation());
}
inline std::string* PromoCode::release_created_at() {
  // @@protoc_insertion_point(field_release:promo.PromoCode.created_at)
  return created_at_.Release();
}
inline void PromoCode::set_allocated_created_at(std::string* created_at) {
  if (created_at != nullptr) {
    
  } else {
    
  }
  created_at_.SetAllocated(created_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (created_at_.IsDefault()) {
    created_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.PromoCode.created_at)
}

// string updated_at = 8;
inline void PromoCode::clear_updated_at() {
  updated_at_.ClearToEmpty();
}
inline const std::string& PromoCode::updated_at() const {
  // @@protoc_insertion_point(field_get:promo.PromoCode.updated_at)
  return _internal_updated_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PromoCode::set_updated_at(ArgT0&& arg0, ArgT... args) {
 
 updated_at_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.PromoCode.updated_at)
}
inline std::string* PromoCode::mutable_updated_at() {
  std::string* _s = _internal_mutable_updated_at();
  // @@protoc_insertion_point(field_mutable:promo.PromoCode.updated_at)
  return _s;
}
inline const std::string& PromoCode::_internal_updated_at() const {
  return updated_at_.Get();
}
inline void PromoCode::_internal_set_updated_at(const std::string& value) {
  
  updated_at_.Set(value, GetArenaForAllocation());
}
inline std::string* PromoCode::_internal_mutable_updated_at() {
  
  return updated_at_.Mutable(GetArenaForAllocation());
}
inline std::string* PromoCode::release_updated_at() {
  // @@protoc_insertion_point(field_release:promo.PromoCode.updated_at)
  return updated_at_.Release();
}
inline void PromoCode::set_allocated_updated_at(std::string* updated_at) {
  if (updated_at != nullptr) {
    
  } else {
    
  }
  updated_at_.SetAllocated(updated_at, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (updated_at_.IsDefault()) {
    updated_at_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.PromoCode.updated_at)
}

// -------------------------------------------------------------------

// CreatePromoCodeRequest

// string token = 1;
inline void CreatePromoCodeRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& CreatePromoCodeRequest::token() const {
  // @@protoc_insertion_point(field_get:promo.CreatePromoCodeRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePromoCodeRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.CreatePromoCodeRequest.token)
}
inline std::string* CreatePromoCodeRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:promo.CreatePromoCodeRequest.token)
  return _s;
}
inline const std::string& CreatePromoCodeRequest::_internal_token() const {
  return token_.Get();
}
inline void CreatePromoCodeRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::release_token() {
  // @@protoc_insertion_point(field_release:promo.CreatePromoCodeRequest.token)
  return token_.Release();
}
inline void CreatePromoCodeRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.CreatePromoCodeRequest.token)
}

// string title = 2;
inline void CreatePromoCodeRequest::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& CreatePromoCodeRequest::title() const {
  // @@protoc_insertion_point(field_get:promo.CreatePromoCodeRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePromoCodeRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.CreatePromoCodeRequest.title)
}
inline std::string* CreatePromoCodeRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:promo.CreatePromoCodeRequest.title)
  return _s;
}
inline const std::string& CreatePromoCodeRequest::_internal_title() const {
  return title_.Get();
}
inline void CreatePromoCodeRequest::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::release_title() {
  // @@protoc_insertion_point(field_release:promo.CreatePromoCodeRequest.title)
  return title_.Release();
}
inline void CreatePromoCodeRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.CreatePromoCodeRequest.title)
}

// string description = 3;
inline void CreatePromoCodeRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CreatePromoCodeRequest::description() const {
  // @@protoc_insertion_point(field_get:promo.CreatePromoCodeRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePromoCodeRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.CreatePromoCodeRequest.description)
}
inline std::string* CreatePromoCodeRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:promo.CreatePromoCodeRequest.description)
  return _s;
}
inline const std::string& CreatePromoCodeRequest::_internal_description() const {
  return description_.Get();
}
inline void CreatePromoCodeRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::release_description() {
  // @@protoc_insertion_point(field_release:promo.CreatePromoCodeRequest.description)
  return description_.Release();
}
inline void CreatePromoCodeRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.CreatePromoCodeRequest.description)
}

// double discount = 4;
inline void CreatePromoCodeRequest::clear_discount() {
  discount_ = 0;
}
inline double CreatePromoCodeRequest::_internal_discount() const {
  return discount_;
}
inline double CreatePromoCodeRequest::discount() const {
  // @@protoc_insertion_point(field_get:promo.CreatePromoCodeRequest.discount)
  return _internal_discount();
}
inline void CreatePromoCodeRequest::_internal_set_discount(double value) {
  
  discount_ = value;
}
inline void CreatePromoCodeRequest::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:promo.CreatePromoCodeRequest.discount)
}

// string code = 5;
inline void CreatePromoCodeRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& CreatePromoCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:promo.CreatePromoCodeRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreatePromoCodeRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.CreatePromoCodeRequest.code)
}
inline std::string* CreatePromoCodeRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:promo.CreatePromoCodeRequest.code)
  return _s;
}
inline const std::string& CreatePromoCodeRequest::_internal_code() const {
  return code_.Get();
}
inline void CreatePromoCodeRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(value, GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::_internal_mutable_code() {
  
  return code_.Mutable(GetArenaForAllocation());
}
inline std::string* CreatePromoCodeRequest::release_code() {
  // @@protoc_insertion_point(field_release:promo.CreatePromoCodeRequest.code)
  return code_.Release();
}
inline void CreatePromoCodeRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault()) {
    code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.CreatePromoCodeRequest.code)
}

// -------------------------------------------------------------------

// UpdatePromoCodeRequest

// string token = 1;
inline void UpdatePromoCodeRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& UpdatePromoCodeRequest::token() const {
  // @@protoc_insertion_point(field_get:promo.UpdatePromoCodeRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePromoCodeRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.UpdatePromoCodeRequest.token)
}
inline std::string* UpdatePromoCodeRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:promo.UpdatePromoCodeRequest.token)
  return _s;
}
inline const std::string& UpdatePromoCodeRequest::_internal_token() const {
  return token_.Get();
}
inline void UpdatePromoCodeRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::release_token() {
  // @@protoc_insertion_point(field_release:promo.UpdatePromoCodeRequest.token)
  return token_.Release();
}
inline void UpdatePromoCodeRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.UpdatePromoCodeRequest.token)
}

// int64 promo_id = 2;
inline void UpdatePromoCodeRequest::clear_promo_id() {
  promo_id_ = int64_t{0};
}
inline int64_t UpdatePromoCodeRequest::_internal_promo_id() const {
  return promo_id_;
}
inline int64_t UpdatePromoCodeRequest::promo_id() const {
  // @@protoc_insertion_point(field_get:promo.UpdatePromoCodeRequest.promo_id)
  return _internal_promo_id();
}
inline void UpdatePromoCodeRequest::_internal_set_promo_id(int64_t value) {
  
  promo_id_ = value;
}
inline void UpdatePromoCodeRequest::set_promo_id(int64_t value) {
  _internal_set_promo_id(value);
  // @@protoc_insertion_point(field_set:promo.UpdatePromoCodeRequest.promo_id)
}

// string title = 3;
inline void UpdatePromoCodeRequest::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& UpdatePromoCodeRequest::title() const {
  // @@protoc_insertion_point(field_get:promo.UpdatePromoCodeRequest.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePromoCodeRequest::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.UpdatePromoCodeRequest.title)
}
inline std::string* UpdatePromoCodeRequest::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:promo.UpdatePromoCodeRequest.title)
  return _s;
}
inline const std::string& UpdatePromoCodeRequest::_internal_title() const {
  return title_.Get();
}
inline void UpdatePromoCodeRequest::_internal_set_title(const std::string& value) {
  
  title_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::_internal_mutable_title() {
  
  return title_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::release_title() {
  // @@protoc_insertion_point(field_release:promo.UpdatePromoCodeRequest.title)
  return title_.Release();
}
inline void UpdatePromoCodeRequest::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(title, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault()) {
    title_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.UpdatePromoCodeRequest.title)
}

// string description = 4;
inline void UpdatePromoCodeRequest::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& UpdatePromoCodeRequest::description() const {
  // @@protoc_insertion_point(field_get:promo.UpdatePromoCodeRequest.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePromoCodeRequest::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.UpdatePromoCodeRequest.description)
}
inline std::string* UpdatePromoCodeRequest::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:promo.UpdatePromoCodeRequest.description)
  return _s;
}
inline const std::string& UpdatePromoCodeRequest::_internal_description() const {
  return description_.Get();
}
inline void UpdatePromoCodeRequest::_internal_set_description(const std::string& value) {
  
  description_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::_internal_mutable_description() {
  
  return description_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::release_description() {
  // @@protoc_insertion_point(field_release:promo.UpdatePromoCodeRequest.description)
  return description_.Release();
}
inline void UpdatePromoCodeRequest::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault()) {
    description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.UpdatePromoCodeRequest.description)
}

// double discount = 5;
inline void UpdatePromoCodeRequest::clear_discount() {
  discount_ = 0;
}
inline double UpdatePromoCodeRequest::_internal_discount() const {
  return discount_;
}
inline double UpdatePromoCodeRequest::discount() const {
  // @@protoc_insertion_point(field_get:promo.UpdatePromoCodeRequest.discount)
  return _internal_discount();
}
inline void UpdatePromoCodeRequest::_internal_set_discount(double value) {
  
  discount_ = value;
}
inline void UpdatePromoCodeRequest::set_discount(double value) {
  _internal_set_discount(value);
  // @@protoc_insertion_point(field_set:promo.UpdatePromoCodeRequest.discount)
}

// string code = 6;
inline void UpdatePromoCodeRequest::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& UpdatePromoCodeRequest::code() const {
  // @@protoc_insertion_point(field_get:promo.UpdatePromoCodeRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdatePromoCodeRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.UpdatePromoCodeRequest.code)
}
inline std::string* UpdatePromoCodeRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:promo.UpdatePromoCodeRequest.code)
  return _s;
}
inline const std::string& UpdatePromoCodeRequest::_internal_code() const {
  return code_.Get();
}
inline void UpdatePromoCodeRequest::_internal_set_code(const std::string& value) {
  
  code_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::_internal_mutable_code() {
  
  return code_.Mutable(GetArenaForAllocation());
}
inline std::string* UpdatePromoCodeRequest::release_code() {
  // @@protoc_insertion_point(field_release:promo.UpdatePromoCodeRequest.code)
  return code_.Release();
}
inline void UpdatePromoCodeRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (code_.IsDefault()) {
    code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.UpdatePromoCodeRequest.code)
}

// -------------------------------------------------------------------

// DeletePromoCodeRequest

// string token = 1;
inline void DeletePromoCodeRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& DeletePromoCodeRequest::token() const {
  // @@protoc_insertion_point(field_get:promo.DeletePromoCodeRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeletePromoCodeRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.DeletePromoCodeRequest.token)
}
inline std::string* DeletePromoCodeRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:promo.DeletePromoCodeRequest.token)
  return _s;
}
inline const std::string& DeletePromoCodeRequest::_internal_token() const {
  return token_.Get();
}
inline void DeletePromoCodeRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* DeletePromoCodeRequest::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* DeletePromoCodeRequest::release_token() {
  // @@protoc_insertion_point(field_release:promo.DeletePromoCodeRequest.token)
  return token_.Release();
}
inline void DeletePromoCodeRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.DeletePromoCodeRequest.token)
}

// int64 promo_id = 2;
inline void DeletePromoCodeRequest::clear_promo_id() {
  promo_id_ = int64_t{0};
}
inline int64_t DeletePromoCodeRequest::_internal_promo_id() const {
  return promo_id_;
}
inline int64_t DeletePromoCodeRequest::promo_id() const {
  // @@protoc_insertion_point(field_get:promo.DeletePromoCodeRequest.promo_id)
  return _internal_promo_id();
}
inline void DeletePromoCodeRequest::_internal_set_promo_id(int64_t value) {
  
  promo_id_ = value;
}
inline void DeletePromoCodeRequest::set_promo_id(int64_t value) {
  _internal_set_promo_id(value);
  // @@protoc_insertion_point(field_set:promo.DeletePromoCodeRequest.promo_id)
}

// -------------------------------------------------------------------

// GetPromoCodeRequest

// string token = 1;
inline void GetPromoCodeRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GetPromoCodeRequest::token() const {
  // @@protoc_insertion_point(field_get:promo.GetPromoCodeRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPromoCodeRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.GetPromoCodeRequest.token)
}
inline std::string* GetPromoCodeRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:promo.GetPromoCodeRequest.token)
  return _s;
}
inline const std::string& GetPromoCodeRequest::_internal_token() const {
  return token_.Get();
}
inline void GetPromoCodeRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPromoCodeRequest::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPromoCodeRequest::release_token() {
  // @@protoc_insertion_point(field_release:promo.GetPromoCodeRequest.token)
  return token_.Release();
}
inline void GetPromoCodeRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.GetPromoCodeRequest.token)
}

// int64 promo_id = 2;
inline void GetPromoCodeRequest::clear_promo_id() {
  promo_id_ = int64_t{0};
}
inline int64_t GetPromoCodeRequest::_internal_promo_id() const {
  return promo_id_;
}
inline int64_t GetPromoCodeRequest::promo_id() const {
  // @@protoc_insertion_point(field_get:promo.GetPromoCodeRequest.promo_id)
  return _internal_promo_id();
}
inline void GetPromoCodeRequest::_internal_set_promo_id(int64_t value) {
  
  promo_id_ = value;
}
inline void GetPromoCodeRequest::set_promo_id(int64_t value) {
  _internal_set_promo_id(value);
  // @@protoc_insertion_point(field_set:promo.GetPromoCodeRequest.promo_id)
}

// -------------------------------------------------------------------

// ListPromoCodesRequest

// string token = 1;
inline void ListPromoCodesRequest::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ListPromoCodesRequest::token() const {
  // @@protoc_insertion_point(field_get:promo.ListPromoCodesRequest.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListPromoCodesRequest::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:promo.ListPromoCodesRequest.token)
}
inline std::string* ListPromoCodesRequest::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:promo.ListPromoCodesRequest.token)
  return _s;
}
inline const std::string& ListPromoCodesRequest::_internal_token() const {
  return token_.Get();
}
inline void ListPromoCodesRequest::_internal_set_token(const std::string& value) {
  
  token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPromoCodesRequest::_internal_mutable_token() {
  
  return token_.Mutable(GetArenaForAllocation());
}
inline std::string* ListPromoCodesRequest::release_token() {
  // @@protoc_insertion_point(field_release:promo.ListPromoCodesRequest.token)
  return token_.Release();
}
inline void ListPromoCodesRequest::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(token, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (token_.IsDefault()) {
    token_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:promo.ListPromoCodesRequest.token)
}

// int32 page = 2;
inline void ListPromoCodesRequest::clear_page() {
  page_ = 0;
}
inline int32_t ListPromoCodesRequest::_internal_page() const {
  return page_;
}
inline int32_t ListPromoCodesRequest::page() const {
  // @@protoc_insertion_point(field_get:promo.ListPromoCodesRequest.page)
  return _internal_page();
}
inline void ListPromoCodesRequest::_internal_set_page(int32_t value) {
  
  page_ = value;
}
inline void ListPromoCodesRequest::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:promo.ListPromoCodesRequest.page)
}

// int32 page_size = 3;
inline void ListPromoCodesRequest::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListPromoCodesRequest::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListPromoCodesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:promo.ListPromoCodesRequest.page_size)
  return _internal_page_size();
}
inline void ListPromoCodesRequest::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListPromoCodesRequest::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:promo.ListPromoCodesRequest.page_size)
}

// -------------------------------------------------------------------

// ListPromoCodesResponse

// repeated .promo.PromoCode promo_codes = 1;
inline int ListPromoCodesResponse::_internal_promo_codes_size() const {
  return promo_codes_.size();
}
inline int ListPromoCodesResponse::promo_codes_size() const {
  return _internal_promo_codes_size();
}
inline void ListPromoCodesResponse::clear_promo_codes() {
  promo_codes_.Clear();
}
inline ::promo::PromoCode* ListPromoCodesResponse::mutable_promo_codes(int index) {
  // @@protoc_insertion_point(field_mutable:promo.ListPromoCodesResponse.promo_codes)
  return promo_codes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::promo::PromoCode >*
ListPromoCodesResponse::mutable_promo_codes() {
  // @@protoc_insertion_point(field_mutable_list:promo.ListPromoCodesResponse.promo_codes)
  return &promo_codes_;
}
inline const ::promo::PromoCode& ListPromoCodesResponse::_internal_promo_codes(int index) const {
  return promo_codes_.Get(index);
}
inline const ::promo::PromoCode& ListPromoCodesResponse::promo_codes(int index) const {
  // @@protoc_insertion_point(field_get:promo.ListPromoCodesResponse.promo_codes)
  return _internal_promo_codes(index);
}
inline ::promo::PromoCode* ListPromoCodesResponse::_internal_add_promo_codes() {
  return promo_codes_.Add();
}
inline ::promo::PromoCode* ListPromoCodesResponse::add_promo_codes() {
  ::promo::PromoCode* _add = _internal_add_promo_codes();
  // @@protoc_insertion_point(field_add:promo.ListPromoCodesResponse.promo_codes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::promo::PromoCode >&
ListPromoCodesResponse::promo_codes() const {
  // @@protoc_insertion_point(field_list:promo.ListPromoCodesResponse.promo_codes)
  return promo_codes_;
}

// int32 total_count = 2;
inline void ListPromoCodesResponse::clear_total_count() {
  total_count_ = 0;
}
inline int32_t ListPromoCodesResponse::_internal_total_count() const {
  return total_count_;
}
inline int32_t ListPromoCodesResponse::total_count() const {
  // @@protoc_insertion_point(field_get:promo.ListPromoCodesResponse.total_count)
  return _internal_total_count();
}
inline void ListPromoCodesResponse::_internal_set_total_count(int32_t value) {
  
  total_count_ = value;
}
inline void ListPromoCodesResponse::set_total_count(int32_t value) {
  _internal_set_total_count(value);
  // @@protoc_insertion_point(field_set:promo.ListPromoCodesResponse.total_count)
}

// int32 page = 3;
inline void ListPromoCodesResponse::clear_page() {
  page_ = 0;
}
inline int32_t ListPromoCodesResponse::_internal_page() const {
  return page_;
}
inline int32_t ListPromoCodesResponse::page() const {
  // @@protoc_insertion_point(field_get:promo.ListPromoCodesResponse.page)
  return _internal_page();
}
inline void ListPromoCodesResponse::_internal_set_page(int32_t value) {
  
  page_ = value;
}
inline void ListPromoCodesResponse::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:promo.ListPromoCodesResponse.page)
}

// int32 page_size = 4;
inline void ListPromoCodesResponse::clear_page_size() {
  page_size_ = 0;
}
inline int32_t ListPromoCodesResponse::_internal_page_size() const {
  return page_size_;
}
inline int32_t ListPromoCodesResponse::page_size() const {
  // @@protoc_insertion_point(field_get:promo.ListPromoCodesResponse.page_size)
  return _internal_page_size();
}
inline void ListPromoCodesResponse::_internal_set_page_size(int32_t value) {
  
  page_size_ = value;
}
inline void ListPromoCodesResponse::set_page_size(int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:promo.ListPromoCodesResponse.page_size)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace promo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_promo_2eproto
