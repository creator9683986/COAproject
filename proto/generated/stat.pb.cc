// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stat.proto

#include "stat.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace stat {
PROTOBUF_CONSTEXPR PaginationRequest::PaginationRequest(
    ::_pbi::ConstantInitialized)
  : page_size_(0)
  , page_number_(0){}
struct PaginationRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PaginationRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PaginationRequestDefaultTypeInternal() {}
  union {
    PaginationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PaginationRequestDefaultTypeInternal _PaginationRequest_default_instance_;
PROTOBUF_CONSTEXPR ListCommentsResponse::ListCommentsResponse(
    ::_pbi::ConstantInitialized)
  : comments_(){}
struct ListCommentsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListCommentsResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListCommentsResponseDefaultTypeInternal() {}
  union {
    ListCommentsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListCommentsResponseDefaultTypeInternal _ListCommentsResponse_default_instance_;
}  // namespace stat
static ::_pb::Metadata file_level_metadata_stat_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_stat_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_stat_2eproto = nullptr;

const uint32_t TableStruct_stat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stat::PaginationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stat::PaginationRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::stat::PaginationRequest, page_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stat::ListCommentsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stat::ListCommentsResponse, comments_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::stat::PaginationRequest)},
  { 8, -1, -1, sizeof(::stat::ListCommentsResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::stat::_PaginationRequest_default_instance_._instance,
  &::stat::_ListCommentsResponse_default_instance_._instance,
};

const char descriptor_table_protodef_stat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nstat.proto\022\004stat\";\n\021PaginationRequest\022"
  "\021\n\tpage_size\030\001 \001(\005\022\023\n\013page_number\030\002 \001(\005\""
  "(\n\024ListCommentsResponse\022\020\n\010comments\030\001 \003("
  "\t2V\n\017CommentsService\022C\n\014ListComments\022\027.s"
  "tat.PaginationRequest\032\032.stat.ListComment"
  "sResponseb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_stat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_stat_2eproto = {
    false, false, 217, descriptor_table_protodef_stat_2eproto,
    "stat.proto",
    &descriptor_table_stat_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_stat_2eproto::offsets,
    file_level_metadata_stat_2eproto, file_level_enum_descriptors_stat_2eproto,
    file_level_service_descriptors_stat_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_stat_2eproto_getter() {
  return &descriptor_table_stat_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_stat_2eproto(&descriptor_table_stat_2eproto);
namespace stat {

// ===================================================================

class PaginationRequest::_Internal {
 public:
};

PaginationRequest::PaginationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:stat.PaginationRequest)
}
PaginationRequest::PaginationRequest(const PaginationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_number_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(page_number_));
  // @@protoc_insertion_point(copy_constructor:stat.PaginationRequest)
}

inline void PaginationRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_size_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_number_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(page_number_));
}

PaginationRequest::~PaginationRequest() {
  // @@protoc_insertion_point(destructor:stat.PaginationRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PaginationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PaginationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PaginationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:stat.PaginationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_number_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(page_number_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaginationRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 page_size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 page_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          page_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PaginationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stat.PaginationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_page_size(), target);
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stat.PaginationRequest)
  return target;
}

size_t PaginationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stat.PaginationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 page_size = 1;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_size());
  }

  // int32 page_number = 2;
  if (this->_internal_page_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_page_number());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PaginationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PaginationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PaginationRequest::GetClassData() const { return &_class_data_; }

void PaginationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PaginationRequest *>(to)->MergeFrom(
      static_cast<const PaginationRequest &>(from));
}


void PaginationRequest::MergeFrom(const PaginationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stat.PaginationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  if (from._internal_page_number() != 0) {
    _internal_set_page_number(from._internal_page_number());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PaginationRequest::CopyFrom(const PaginationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stat.PaginationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaginationRequest::IsInitialized() const {
  return true;
}

void PaginationRequest::InternalSwap(PaginationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PaginationRequest, page_number_)
      + sizeof(PaginationRequest::page_number_)
      - PROTOBUF_FIELD_OFFSET(PaginationRequest, page_size_)>(
          reinterpret_cast<char*>(&page_size_),
          reinterpret_cast<char*>(&other->page_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PaginationRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stat_2eproto_getter, &descriptor_table_stat_2eproto_once,
      file_level_metadata_stat_2eproto[0]);
}

// ===================================================================

class ListCommentsResponse::_Internal {
 public:
};

ListCommentsResponse::ListCommentsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  comments_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:stat.ListCommentsResponse)
}
ListCommentsResponse::ListCommentsResponse(const ListCommentsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      comments_(from.comments_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:stat.ListCommentsResponse)
}

inline void ListCommentsResponse::SharedCtor() {
}

ListCommentsResponse::~ListCommentsResponse() {
  // @@protoc_insertion_point(destructor:stat.ListCommentsResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListCommentsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListCommentsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCommentsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:stat.ListCommentsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  comments_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCommentsResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string comments = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_comments();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "stat.ListCommentsResponse.comments"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListCommentsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stat.ListCommentsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string comments = 1;
  for (int i = 0, n = this->_internal_comments_size(); i < n; i++) {
    const auto& s = this->_internal_comments(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stat.ListCommentsResponse.comments");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stat.ListCommentsResponse)
  return target;
}

size_t ListCommentsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stat.ListCommentsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string comments = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(comments_.size());
  for (int i = 0, n = comments_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      comments_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCommentsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCommentsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCommentsResponse::GetClassData() const { return &_class_data_; }

void ListCommentsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListCommentsResponse *>(to)->MergeFrom(
      static_cast<const ListCommentsResponse &>(from));
}


void ListCommentsResponse::MergeFrom(const ListCommentsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:stat.ListCommentsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  comments_.MergeFrom(from.comments_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCommentsResponse::CopyFrom(const ListCommentsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stat.ListCommentsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCommentsResponse::IsInitialized() const {
  return true;
}

void ListCommentsResponse::InternalSwap(ListCommentsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  comments_.InternalSwap(&other->comments_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCommentsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_stat_2eproto_getter, &descriptor_table_stat_2eproto_once,
      file_level_metadata_stat_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace stat
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stat::PaginationRequest*
Arena::CreateMaybeMessage< ::stat::PaginationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stat::PaginationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::stat::ListCommentsResponse*
Arena::CreateMaybeMessage< ::stat::ListCommentsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stat::ListCommentsResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
